/***********************************************************************


            EXHIBIT A - XIL 1.4.1 (OPEN SOURCE VERSION) License


The contents of this file are subject to the XIL 1.4.1 (Open Source
Version) License Agreement Version 1.0 (the "License").  You may not
use this file except in compliance with the License.  You may obtain a
copy of the License at:

    http://www.sun.com/software/imaging/XIL/xilsrc.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.

The Original Code is XIL 1.4.1 (Open Source Version).
The Initial Developer of the Original Code is: Sun Microsystems, Inc..
Portions created by:_______________________________________________
are Copyright(C):__________________________________________________
All Rights Reserved.
Contributor(s):____________________________________________________


***********************************************************************/

//------------------------------------------------------------------------
//
//  File:	XiliDagManager.hh
//  Project:	XIL
//  Revision:	1.12
//  Last Mod:	10:21:29, 03/10/00
//
//  Description:
//    This object contains the locks and logic for managing the
//    independent DAGs in the running process.  Like the XilGlobalState
//    object, there is only one of these for a single process.
//    In fact, it is only accessed through in the global state.
//
//    Every DAG has a unique number.  When aquiring a new DAG, a new
//    number is generated by locking the manager lock and creating a
//    new XiliDag object.
//
//    Merging two DAGs is also handled by the DAG manager.  The DAG 
//    manager inspects the numbers of the two DAGs to be merged.
//    It then attempts to lock both DAGs by aquiring the locks based
//    on their numbers -- attmpting the lowest numbered DAG first.
//
//    There are two classes for handling DAGs.  There is the XiliDagRef 
//    which manages a reference to a DAG and the XiliDag class which
//    contains the information needed to maintain the coherency behind
//    of a DAG.  When DAGs merge, only the references change.
//
//  MT-level:  UNSAFE -- the DAG manager must be locked to use
//	
//------------------------------------------------------------------------
//	COPYRIGHT
//------------------------------------------------------------------------
#pragma ident	"@(#)XiliDagManager.hh	1.12\t00/03/10  "

#ifndef _XILI_DAG_MANAGER
#define _XILI_DAG_MANAGER

//
//  System Includes
//

//
//  XIL Includes
//
#include "_XilSystemState.hh"
#include "_XilMutex.hh"
#include "_XilCondVar.hh"

//
//  Forward-declare two more DAG classes.
//
class XiliDagRef;
class XiliDag;

class XiliDagManager {
public:
    XiliDagRef*  getNewDAG(XilSystemState* system_state);
    XiliDagRef*  mergeDAGs(XiliDagRef* dagref1,
                           XiliDagRef* dagref2);

    //
    //  Used by the op and image to lock the changing of DAG references.
    //
    void                lock()
    {
        managerMutex.lock();
    }

    void                unlock()
    {
        managerMutex.unlock();
    }
            
    void                waitForDagUnlock()
    {
        dagUnlockCondVar.wait();
    }

    void                signalUnlock()
    {
        //
        //  Wake up all threads waiting on this
        //
        dagUnlockCondVar.broadcast();
    }

    //
    //  Constructor/Destructor
    //
                        XiliDagManager() :
                            dagUnlockCondVar(&managerMutex)
    {
        maxCount   = 1;
    }
    
private:
    Xil_unsigned64   maxCount;

    XilMutex         managerMutex;
    XilCondVar       dagUnlockCondVar;
};

#endif //  _XILI_DAG_MANAGER
