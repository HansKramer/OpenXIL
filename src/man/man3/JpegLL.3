.\" @(#)JpegLL.3 1.2 96/09/17 SMI/VPG;
.so man3/xil.macs
.TH "JpegLL" 3 "14 April 1993" "" "XIL Library"
.SH NAME
JPEG Lossless compressor/decompressor \- JPEG Lossless compressor/decompressor for compressed image sequences
.SH DESCRIPTION
.IX JpegLL
.IX Functions JpegLL
.IX "JpegLL" "overview"
.nh
The JPEG Lossless compresor/decompressor is the lossless variant of the
Jpeg series of codecs (see Jpeg(3)). 
The lossless compression technique uses
Differential Pulse Code Modulation (DPCM) with
two-dimensional prediction and Huffman coding.
It is the only codec in the current XIL compression suite which
can operate on pixel data with greater than 8 bit precision. This
compressor will accept input data of type XIL_BYTE or XIL_SHORT.
.P
.nh
For more information and example programs, see the 
.I "XIL Programmer's Guide."
.P
.SS Creating a CIS
.nh
To compress a compressed image sequence (CIS) with the XIL JPEG Lossless compressor, specify "JpegLL" for the 
.I compressorname
argument in
.BR xil_cis_create (3).
.SS Getting and Setting Attributes
.nh
Use 
.BR xil_cis_get_attribute (3)
and 
.BR xil_cis_set_attribute (3)
to get and set JPEG Lossless CIS attributes.  These attributes are described 
in the following sections.  Refer to the example section for additional
information.
.SS JpegLL Compression Attributes
.nh
The following paragraphs describe the JPEG Lossless CIS attributes available
with the XIL library. All structures and enumerations are defined via 
.B xil.h.  
Note that some attributes are "set-only" and others are "get-only."  This is noted under the 
.I Access 
heading for each attribute.
.PP
Note that if you are setting an attribute and 
that attribute is a structure, you must pass the address of that structure.  If
you are getting an attribute, you must always pass its address.
.IX "JPEG Lossless" "compression attributes"
.P
.I COMPRESSED_DATA_FORMAT
.P
.TP 15
Description
defines output format for JPEG Lossless compressor
.TP 15
Access     
set
.TP 15 
Type
typedef enum{
.nf
              INTERCHANGE, ABBREVIATED_FORMAT
} XilJpegCompressedDataFormat;
.fi
.sp
.ne 10
.TP 15
Values
.I INTERCHANGE:
.nh 
Use JPEG interchange format. All quantization and entropy-coding table specifications needed by the decoding process are included in each compressed frame.
.sp
.ne 10  
.I ABBREVIATED_IMAGE: 
.nh
Use JPEG abbreviated format for compressed images. Quantization and  entropy-coding table specifications are not included in a compressed frame if the specifications are defined in a previous frame in the compressed sequence. If any table values change after they are defined in the compressed sequence, a new table definition is included in the first compressed frame that uses the new table values.
.TP 15
Default
.I ABBREVIATED_IMAGE
.TP 15
Notes 
.nh
This does not include the third type: 
.I ABBREVIATED_TABLE, 
in which a frame contains only table specifications. However, the decoder will accept this format.
.nf
.sp
.fi
.ne 10
.P
.I ENCODE_INTERLEAVED
.TP 15  
Description
.nh
If the image to compress is composed of 4 bands or less, having this
attribute set to TRUE will generate an interleaved JPEG-compliant bitstream.
In this form, encoded pixels are interleaved by band.
If the number of bands exceeds 4  or if this attribute is set to FALSE, a
noninterleaved JPEG-compliant bitstream is generated. With non-interleaved
format, all encoded pixels of one band precede all encoded pixels of the
following band.
.sp
.TP 15  
Access
set-only
.TP 15
Type
Xil_boolean
.TP 15
Values
.I TRUE: 
.nh
For images of 4 bands or less, produce an interleaved JPEG-compliant bitstream.
.sp
.I FALSE: 
Produce a noninterleaved JPEG-compliant bitstream.
.TP 15
Default
.I TRUE
.nf
.sp
.fi
.P
.I HUFFMAN_TABLE
.TP 15
Description
Set values in specified Huffman table
.TP 15
Access
set-only
.TP 15
Type
typedef struct {
.nf
                int table;
                XilJpegHTableType type;
                XilJpegHTableValue *value;
} XilJpegHTable;
.sp
typedef enum {
              DC, AC
} XilJpegHTableType;
.sp
.ne 10
typedef struct {
                int bits;
                int pattern;
} XilJpegHTableValue;
.sp
.fi
.TP 15
Values
.I table: 
A value in the range 0-3.
.sp 
.I type: 
.nh
The only valid value is
.I DC. 
.sp
.I value: 
.nh
A pointer to an array of 17 data pairs, each pair representing a Huffman code.
The first element `bits' indicates the length of the Huffman code word.
The second element `pattern' contains the actual value of the Huffman code
in its least significant `bits' bits. Entry
.BR value[k], k=0,16,
represents the code for a difference (prediction error) of size category k.
See section H.1.2.2 of the
Jpeg Specification (ITU Recommendation T.81 - 09/92), for more detail on
JpegLL Huffman table specification.
.sp
.TP 15
Default
.nh
By default, the values in each of the tables are pre-initialized to the
example values given in Annex K of the ANSI JPEG specification. Tables 0
and 2 contains the same values used to encode DC differences on
Jpeg luminance components. Tables 1 and 3 contain the same values used to
encode DC differences in Jpeg chrominance components. Both sets of tables
are extended to accomodate 16 bit pixel values.
.sp
.fi
.P
.I BAND_HUFFMAN_TABLE
.TP 15
Description
Instructs the encoder to use a specific Huffman table for a given band.
.TP 15
Access
set-only
.TP 15
Type
typedef struct {
.nf
                int band;
                int table;
                XilJpegHTableType type;
} XilJpegBandHTable;
.fi
.TP 15
Values
.I band: 
Can have a value in the range 0-255.
.sp 
.I table: 
A value in the range 0-3.
.sp
.I type: 
The only valid value is 
.I DC.
.sp
.ne 10 
.TP 15
Default
.nh
Band 0 is encoded with
.I table 0. 
All other bands are encoded using 
.I table 1.
.TP 15
Notes
.nh
Bands may be assigned to tables that have not yet been set. However,
the tables must be set before a call to compress is made or an error
occurs.
.nf
.sp
.fi 
.P
.I OPTIMIZE_HUFFMAN_TABLES
.TP 15
Description
.nh
Provide a hint to the compressor, enabling it to generate optimal 
Huffman tables instead of using the default example values specified in the ANSI specification. This is only a hint; the compressor is free to ignore the hint.  For Lossless JPEG, setting this option attribute on or off keeps 
the current tables loaded.  No optimal Huffman tables are provided for 
Lossless JPEG. 
.TP 15
Access
set-only
.TP 15
Type
Xil_boolean
.TP 15
Values
.I TRUE: 
.nh
Huffman tables may vary from image to image to achieve higher compression.
.sp
.I FALSE: 
Use fixed Huffman tables for each image in the sequence.
.TP 15
Default
.I FALSE
.sp  
.P
.I LOSSLESS_BAND_SELECTOR
.TP 15
Description
Associates a band of an image to a predictor selection for the Lossless JPEG compressor.  In the following discussion under the 
.I Values
heading, Px = prediction for pixel "x", A = pixel left, B = pixel above, 
C = pixel diagonally above and left.
.nf
	
		C  B 
		A  x 

.fi
.TP 15
Access     
set-only
.TP 15
Type
typedef struct {
.nf
                int band;
                XilJpegLLBandSelectorType selector;
} XilJpegLLBandSelector;

typedef enum {
		ONE_D1,ONE_D2,ONE_D3,TWO_D1,TWO_D2,
			TWO_D3,TWO_D4
 }  XilJpegLLBandSelectorType;
.fi
.sp
.ne 20
.TP 15
Values
.I band:
.nh
Can have a value in the range 0-255.
.sp
.I NO_PRED:
.nh 
Invalid selection for Lossless JPEG.
.sp  
.I ONE_D1:
.nh
Px = A
.sp  
.I ONE_D2:
.nh
Px = B
.sp  
.I ONE_D3:
.nh
Px = C
.sp  
.I TWO_D1:
.nh
Px = A + B - C
.sp  
.I TWO_D2:
.nh
Px = A + ((B - C)/2)
.sp  
.I TWO_D3:
.nh
Px = B + ((A - C)/2)
.sp  
.I TWO_D4:
.nh
Px = (A + B)/2
.TP 15
Default
.nh
All bands default to selector ONE_D1.
.fi
.nf
.sp
.P
.fi
.nh
.I LOSSLESS_BAND_PT_TRANSFORM
.TP 15
Description
Associates a band of an image with a point transform, PtTransform, for the Lossless JPEG compressor.  If PtTransform is non-zero, the input image band is divided by 2**PtTransform before lossless encoding.
.TP 15
Access     
set-only
.TP 15 
Type
typedef struct {
.nf
               int band;
               int PtTransform;
} XilJpegLLBandPtTransform;
.fi
.TP 15
Values
.I band:
.nh
Can have a value in the range 0-255.
.sp
.I PtTransform:
.nh 
Can have a value in the range 0-15.
.TP 15
Default
.nh
All bands default to PtTransform = 0.
.SH EXAMPLES
.nh
The following example opens and closes a JPEG Lossless CIS using the XIL library:
.LP
.nf
.sp
.RS
.ft 3
XilSystemState State;
XilCis cis;
.ta 3.5i
State = xil_open(\^);
cis = xil_cis_create(State, \^"JpegLL\^");  

-- calls to JpegLL-specific compression routines --

xil_cis_destroy(cis);
xil_close(State);
.RE
.fi
.ft 1
.fi
.sp
.ne 15
.PP
The following example sets a JPEG Lossless CIS attribute called
.I ENCODE_INTERLEAVED 
to TRUE.  Note that because this attribute is not a structure, it is not
necessary to pass the address of 
.I ENCODE_INTERLEAVED
when setting it.
.RS
.ft B
.nf
.sp
XilCis cis;
.sp
xil_cis_set_attribute(cis,"ENCODE_INTERLEAVED", (void *) TRUE);
.sp
.fi
.ft
.RE
.P
The following example returns the value of a JPEG Lossless CIS attribute called
.I ENCODE_INTERLEAVED.  
Note that when getting an attribute it is always
necessary to pass the address.
.RS
.ft B
.nf
.sp
Xil_boolean encode_type;
XilCis cis;
.sp
xil_cis_get_attribute(cis, "ENCODE_INTERLEAVED", 
.br
.in +8
(void **) &encode_type);
.in
.fi
.ft
.RE
.SH NOTES
.nh
The 
.B xil_cis_set_attribute
(\^) and
.B xil_cis_get_attribute
(\^) calls are used to modify the default behavior of a specific compressor.  Generic attributes of compressors are set by individual function calls.
.sp
.ne 20
.SH SEE ALSO
.BR xil_cis_create (3),
.BR xil_cis_get_attribute (3),
.BR xil_cis_get_bits_ptr (3),
.BR xil_compress (3),
.BR xil_decompress (3).
