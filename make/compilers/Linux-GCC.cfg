#
# @(#)Linux-GCC.cfg	1.26 00/02/23 
#
########
#
# Compiler (and tools) configuration for 
#    SunOS 5.0 C/C++ GNU C++
#

# Additional target names (other than debug, profile)
TARGET_VARIANTS += 

# Shared library extensions
SHAREDLIB_EXT=.so

#Static library extension
STATICLIB_EXT=.a

#
# Pre-processor defines.
# Local tailoring (on the command line) can be done by setting XCCPPFLAGS
# which is never set in the Makefile's
#
DEFINES  += -DGCC -D_REENTRANT $(XIL_DEFINES) $(THREAD_DEFINES) $(TNF_PROBE_DEFINES)
CPPFLAGS += $(XCCPPFLAGS) $(DEFINES) -I$(PROJECT_RELEASE)/include -I$(PROJECT_ROOT)/src/utils  -I$(OPENWINHOME)/include -I/usr/local/xil/include -I/usr/local/xil/xilch/include/
CPPFLAGS += $(XCCPPFLAGS) $(DEFINES) -I$(PROJECT_RELEASE)/include -I$(PROJECT_ROOT)/src/utils  -I$(OPENWINHOME)/include 

#
# Local tailoring (on the command line) can be done by setting XCCFLAGS
# which is never set in the Makefile's
#

#
# CFLAGS_OPTIMIZE_V, CFLAGS_DEBUG_V, CFLAGS_PROFILE_V are the values we
# would want the corresponding macros to be set to.
#
# CFLAGS_OPTIMIZE, CFLAGS_DEBUG, CFLAGS_PROFILE are set in the leaf
# Makefiles by the 'debug:' and 'profile:' targets to their _V values.
#

# default flags
#CFLAGS_DEFAULT = -Wall -pedantic $(SPECIAL_$(TARCH)_CFLAGS_DEFAULT)

#
#  The XIL tree assumes the scope for a declaration in a for() 
#  statement is valid for the remainder of the block.  GCC implements
#  the latest ANSI C++ spec which states the declaration in a for()
#  loop is only valid within the block of the for loop.  So, we use
#  -fno-for-scope to indicate the older behavior should be used.
#
CFLAGS_DEFAULT = -pipe -w -fno-for-scope -fno-implicit-templates $(SPECIAL_$(TARCH)_CFLAGS_DEFAULT)

# optimize flag: typically -0, could use -O4 or -fast
CFLAGS_OPTIMIZE_V=-O2 -finline-functions -funroll-loops -m32 -fnonnull-objects
CFLAGS_OPTIMIZE_V=-O2 -finline-functions -funroll-loops -m32

# debug flag; typically -g
CFLAGS_DEBUG_V=-g -DDEBUG -fno-default-inline -fno-inline

# when debugging, optimize flag: typically empty
# some compilers do allow optimization with their "-g" 
CFLAGS_DEBUG_OPTIMIZE_V=

# profile flag; use gprof(1)
CFLAGS_PROFILE_V=-pg

# tcov flag
CFLAGS_TCOV_V=-a
CFLAGS_TCOV_OPTIMIZE_V=

# default is to optimize
CFLAGS_OPTIMIZE=$(CFLAGS_OPTIMIZE_V)

# how to build an index for source browser
CFLAGS_INDEX_V=-sb

# dynamic libraries
CFLAGS_DYNAMIC_V=-fPIC
ASFLAGS_DYNAMIC_V=-K PIC

# release flag
CFLAGS_RELEASE_V=-D_XIL_RELEASE_BUILD
CFLAGS_RELEASE_OPTIMIZE_V=$(SPECIAL_$(TARCH)_CFLAGS_OPT)

CFLAGS=$(CFLAGS_OPTIMIZE) $(CFLAGS_DEBUG) $(CFLAGS_PROFILE) $(CFLAGS_TCOV) $(CFLAGS_INDEX) $(CFLAGS_DEFAULT) $(XCCFLAGS) $(CFLAGS_RELEASE)

# C++ library to link with
CPLUSPLUS_LIB=
CPLUSPLUS_LIBDIR=

LIBAPI_EXT=$(LIB_VARIANT)${SHAREDLIB_EXT}$(XIL_API_VERS)
LIBGPI_EXT=$(LIB_VARIANT)${SHAREDLIB_EXT}$(XIL_GPI_VERS)

# List of link files to include in -l option
LINK_c=-lstdc++ -m32
LINK_m=-lm
LINK_dl=-ldl
LINK_kcs=-lkcs
LINK_dga=-ldga
LINK_xgl=-lxgl
LINK_xil_to_xgl=-lxil_to_xgl$(LIB_VARIANT)
LINK_X11=-lX11
LINK_Xext=-lXext
#LINK_intl=-lintl
LINK_aout=-lelf
LINK_xil=-lxil$(LIB_VARIANT)
LINK_ts=-lts$(LIB_VARIANT)
LINK_vff=-lvff$(LIB_VARIANT)
LINK_fileio=-lfileio$(LIB_VARIANT)
LINK_xiliUtils=${PROJECT_RELEASE}/$(XIL_UTILS_SUBDIR)/xiliUtils${LIBGPI_EXT}
LINK_xiliUtils_ComputeInfo= \
       ${PROJECT_RELEASE}/$(XIL_UTILS_SUBDIR)/xiliUtils_ComputeInfo${LIBGPI_EXT}
LINK_xiliUtils_FaxCommon= \
       ${PROJECT_RELEASE}/$(XIL_UTILS_SUBDIR)/xiliUtils_FaxCommon${LIBGPI_EXT}
LINK_xiliUtils_Codec= \
       ${PROJECT_RELEASE}/$(XIL_UTILS_SUBDIR)/xiliUtils_Codec${LIBGPI_EXT}

# List of library paths without -L
LD_PATHS= ${PROJECT_RELEASE}/$(XIL_UTILS_SUBDIR) \
          ${PROJECT_RELEASE}/$(XIL_LIB_SUBDIR) \
          ${PROJECT_RELEASE}/$(XIL_DEVHANDLERS_SUBDIR) \
	  /usr/X11R6/lib	# TODO bpb 10/15/1997 hack.

# libraries you want EVERYONE to link with
LD_LIBS= ${LINK_xiliUtils} $(CPLUSPLUSLIB_A) ${LINK_threads}

# ld flag to ensure pure-text
LDFLAGS_MUST_BE_PURE_V = -z text -z defs

# ld flag for [un]shared objects
LDFLAGS_STATIC_LIBRARIES_V = -dn
LDFLAGS_SHARED_LIBRARIES_V = -dy

# -R - LD_RUN_PATH Specification
LD_RUN_PATH_FLAG_V = -Xlinker -rpath -Xlinker
LD_RUN_PATH_OPT_V = $(LD_RUN_PATH_FLAG_V) $(CONFIG.$(HOST_ARCH_NAME).OFFICIAL.INSTALL.POINT):$(CONFIG.$(HOST_ARCH_NAME).OFFICIAL.UTILS.INSTALL.POINT):$(OPENWINHOME)/lib
LD_RUN_PATH_OPT_OW_V = $(LD_RUN_PATH_FLAG_V) $(OPENWINHOME)

# Special linker options when building lib.so
LDFLAGS_DYNAMIC_V = $(LD_RUN_PATH_OPT_V) $(LDFLAGS_MUST_BE_PURE_V) -shared -Xlinker -Bdynamic

# Some dynamic linking systems want the preferred name recorded in the binary
# ref: src/libxil/Makefile
LDFLAGS_DYNAMIC_LIBNAME_V = -Xlinker -h -Xlinker $(DYNAMIC_VERSION_LIBNAME)

# ld flags for profiling, debugging
LDFLAGS_PROFILE_V =
LDFLAGS_TCOV_V = 
LDFLAGS_DEBUG_V =

# SunOS 5.0 wants a space between -L and dir name
LDFLAGS= $(LDFLAGS_PROFILE) $(LDFLAGS_TCOV) $(LDFLAGS_DEBUG) $(LD_PATHS:%=-L %)

#
# rules/lib.cfg uses this so that the LIB rule is common for all platforms
#
LD_LIB_ARGS=-o $@ $(LDFLAGS) $(OBJS) $(LD_LIBS)

LD_OUTFILE=-o $@
#
# Stuff to clean and clobber for the compiler
#

CLEAN_CC = a.out *.o *.tcov
CLOBBER_CC = 

#
# Client compiler and support tools
#

CC=$(XIL_CC_PATH)

#AS=/usr/ccs/bin/as

# Use CC for linking so static constructors and destructors 
# get setup and called correctly.
LD=$(CC)
NM=/usr/bin/nm
AR=/usr/bin/ar
# only used to make sure we skip it when coalescing libraries.
# Not a problem on SVR4, use an improbable value
AR_SYMBOL_TABLE = HIGHLY-UNLIKELY-TO-CONFLICT

SIZE=/usr/bin/size

#
# Command to convert a normal archive to one searchable by $(LD)
# Not needed on SVR4
#

MKLIB=/usr/bin/ranlib

#
# Yacc and lex
#

YACC=/usr/ccs/bin/yacc
LEX=/usr/ccs/bin/lex
YFLAGS=

#
# How to compile stuff into ${ARCH} subdirectory
#

${ARCH}/%.o: %.cc
	${COMPILE.c} -o $@ $<

${ARCH}/%.o: %.c
	${COMPILE.c} -o $@ $<

ASCPPFLAGS = -D_ASM

COMPILE.S=  $(AS) $(ASFLAGS) -P $(CPPFLAGS) $(ASCPPFLAGS)
COMPILE.c=  $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE.cc= $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c
LINK.cc=    $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)
LINK.c=     $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -lstdc++

${ARCH}/%.o: %.S
	${COMPILE.S} -o $@ $<

${ARCH}/%: ${ARCH}/%.o
	${LINK.c} -o $@ $@.o ${LD_LIBS}

# create $(ARCH)/pgm from pgm.sh
${ARCH}/%: %.sh
	$(RM) $@
	$(CP) $< $@
	$(CHMOD) +x $@
