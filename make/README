@(#)README	1.9 93/10/25 Sun Microsystems North Carolina Development Center
                                                
    make/README

    This file describes the layout and conventions of the make tree used in
    the MPO software project (as well as VX, NACHOS, XIL, XILCH).
    All of these "make" trees are substantially similar; however this
    file documents the current state of the mpo Makefile tree.

    This make tree was developed originally
    to simplify porting the VX project to Solaris 2.0.  The primary goals are:

        .  simple makefiles

        .  use standard Sun make.  There is no pre-processing or
            automatic generation of Makefiles.

        .  Same makefiles work on both 4.x and Solaris 2.x
            (Eg: svr4 ld(1) insists on space between -L and dirname;
                4.x insists on *no* space
             Eg: svr4 spells -Bstatic as -dn, etc.)
        
        .  Support for different compilers and operating systems
            on a per-user basis.  Using the same sources (including
            Makefiles) one developer can develop and test under SVR4,
            another under 4.x, another under 386 SVR4.

        .  Builtin support for compiling "variants" such as debug,
            profile, and tcov versions.  These variants can be built
            recursively.
            
        .  Control of system dependencies.  "hidden" dependencies on
            environment variables (such as PATH, SUNVISION, OPENWINHOME)
            have been removed whenever possible.  No matter what your
            PATH variable is set to, you should get the same thing
            when you 'make' as everyone else on the project.

    This description attempts to cover all aspects of the Makefile tree.  Most
    of what is described here is maintained automatically by the configuration
    files.  In almost every case the supplied template Makefiles will work
    after a little "fill-in-the-blank" work.

    There are 2 main types of Makefile:

        directory and leaf.

    Directory Makefiles
    -------------------

        A Makefile in a source directory with sub-directories is called a
        "directory" Makefile.

        Directory Makefile's are simply responsible for acting as "middle-men"
        and recursing into their sub-directories and propagating the make.

        For example, directory src/bin will contain only a Makefile and
        sub-directories.  No actual source code will reside in the directory.
        The following commands:

            $ cd src/bin
            $ make all

        would descend into all the subdirectories of 'src/bin' and recursively
        perform a 'make all'.

        A template directory Makefile which should work in almost all
        cases is in make/Templates/Makefile.dir
        

    Leaf Makefiles
    --------------

        Source directories that contain source code for libraries or
        programs use a "leaf" Makefile.  
        
        These makefiles contain the rules necessary to build programs
        (or libraries).
        
        A template leaf Makefile is in Templates/Makefile.leaf .  A template
        leaf Makefile for building libraries is in Templates/Makefile.lib .
        

    NOTE: To simplify nested makefile's and source maintenance, we disallow
    combining source and directories (that make(1) would be expected to
    recurse into) in one source directory.  Ie., a directory in the source
    tree may contain EITHER source files OR recursive sub directories, but NOT
    both.

    Variants (where objects go)
    ---------------------------

        All binary targets are placed in a sub-directory whose name is (for
        example):

            sparc/                -- binaries (no debug, no profile)
            sparc-debug/          -- debug binaries
            sparc-profile/        -- profiling binaries
            sparc-tcov/           -- tcov binaries
            
        Using the template Makefiles, this will all happen automatically.

        Within a Makefile, the ${ARCH} variable is set to sparc, sparc-debug,
        etc., as appropriate.

        Typing 'make' will place objects in sparc.
        'make debug' will place objects in sparc-debug.
        'make profile' will place objects in sparc-profile.

        NOTE:  under 4.x, replace 'sparc above with 'sun4'.
        
        The debug and profile targets are equivalent to 'all' except that
        CFLAGS and/or LDFLAGS are modified as per the compiler config file for
        debug and profile support.

        Targets debug_install and profile_install are equivalent to 'make
        install' except that debug (or profile) variants are built and
        installed.

        The targets debug, profile, debug_install, profile_install, etc., can be
        invoked recursively at the directory make level.  So from the top of a
        tree, one could install a debug version of everything under that point
        by:

            $ cd src/lib
            $ make debug_install
        
        When building a command that is linked with a generated library, the
        appropriate version of the library will be linked in.

        For example, the following fragments link the normal, debug, or
        profile version of "libmine.a" as appropriate:

            LDLIBS   += $(LIBMINE)
            LIBMINE = ../libmine/${ARCH}/libmine.a

            ${ARCH}/pgm: $(LIBMINE) ${OBJS}
                $(LINK.c) -o $@ ${OBJS} $(LDLIBS)

        If we do 'make debug', then the library in
        ../libmine/sparc-debug/libmine.a will be linked in.  If $(LIBMINE)
        might not exist at this point, we could add

            ${LIBMINE}: FORCEIT
	        cd ../libmine; ${MAKE} ${VARIANT_VA}

        The above would generate the following command to build libmine.a:

            cd ../libmine; /bin/make debug

        The macro reference ${VARIANT_VA} converts ${ARCH} to the word 'debug'
        (in this example) and thus ensures the proper version of the library
        is built.
        

    Targets
    -------

        All Makefile's support the following targets:

            all                     -- make "everything"
            install                 -- install "everything"

        The following targets are provided automatically by
        the included config files:
        
            clean                   -- delete all targets
            clobber                 -- 'clean' plus delete sccs'd files
            lint                    -- run lint or lint-like tool
            get                     -- "sccs get" all sources
            "variant targets"       -- special variants, see below
        

        All directory Makefiles automatically propagate all these targets.  If
        you don't wish to support 'all' or 'install' in your source directory,
        just leave the rules section empty, as the parent directory Makefile
        will attempt it on recursive make's.


    Configuration
    -------------

        All the real work described here happens in file(s) included
        from your Makefile.

        All Makefiles include a customization file which is used to select
        compiler and host operating system.  The environment variable
        MPO_CUSTOM must point to this file, which is usually in
        your mpo clone in make/custom/default.cfg.

        All leaf Makefile's also include either 'make/leaf.cfg' (or
        'make/lib.cfg' for building libraries).  These config files provide
        default rules and set up the command macros as appropriate.

        All directory Makefiles include 'make/directory.cfg'.  directory.cfg
        provides all the rules for recursing through sub directories.

        The Makefile templates already perform these include's.

        'make/leaf.cfg' (or directory.cfg) in turn includes:
        
            a file specifying general purpose rules appropriate for
                both leaf and directory makefiles.
                ( make/main.cfg )

            personality modules specified by the customization file for:
                compiler            ( make/compilers/?? )
                operating system    ( make/os/?? )
               

        private customization files
        ---------------------------

            [ $(MPO_CUSTOM) ]
            
            Your own private configuration file.  Specifies which of the above
            files you want to include.

            Example: custom/default.cfg

                CONFIG_sun4_OS=$(CONFIG_DIR)/os/SunOS4.cfg
                CONFIG_sun4_CC=$(CONFIG_DIR)/cc/SunOS4.cfg

                CONFIG_sun4_OVERRIDES=/dev/null
                
                # Make sure we all agree on version of openwin
                OPENWINHOME = /usr/openwin

           To use cc instead of CC use the folling include: 
                include $(CONFIG.$(HOST_ARCH_NAME).C)
            
        generic rules file
        ------------------

            [ make/main.cfg ]
            included by leaf.cfg or directory.cfg.
            
            This file contains some standard rules and variable assignments
            that all Makefiles need.
                        
            It also includes the .KEEP_STATE: and FORCEIT: pseudo targets.
       

        OS config file for host machine
        -------------------------------
    
            [ make/os/OS-NAME.cfg ]
            included by main.cfg

            Figures out the target architecture and specifies command names
            for the OS tools including sccs (but NOT for the compiler tools).
            

        Compiler configuration for the target
        -------------------------------------

            [ compilers/COMPILER-NAME.cfg ]
            included by leaf.cfg

            Specifies the names of tools for compiling programs.
            Names in here should be fully qualified, and NOT depend on $PATH.
        
            Also specifies compiler flags to be used to generate optimized,
            debugging and profile versions, as well as rules to compile
            assembly language.


    Configuration Variables
    -----------------------

        Variables you have to set in the environment or in your Makefile.
        Note: the mpo modulefiels set MPO_ROOT and MPO_CUSTOM
        for you.

        Environment Variables
        ---------------------

            MPO_ROOT     -- The root of your source tree.
                            All other file names are derived from this.
                            [ eg: % setenv MPO_ROOT $HOME/mm/mpo ]

            MPO_CUSTOM   -- name of your config files in make/custom
                            Example:
                                $(MPO_ROOT)/make/custom/default.cfg

            The value MPO_ROOT is used in the custom
            files to generate the make(1) variables:

                PROJECT_ROOT
                PROJECT_HOME
                PROJECT_RELEASE
                PROJECT_TOOLS

            etc., which are used within the make config files themselves.


        Preset variables
        ----------------

            Aside from command names set by the os and compiler config files,
            a number of MAKE variables are automatically set and maintained by
            the config files.

            CONFIG.$(HOST_ARCH_NAME).OS
                        -- full path of OS config file, set by
                           custom config file.

            CONFIG.$(HOST_ARCH_NAME).CC
                        -- full path of C++ compilation config file, set by custom
                           config file.
                            
            CONFIG.$(HOST_ARCH_NAME).C
                        -- full path of cc compilation config file, set by custom
                           config file.
                            
            CONFIG.$(HOST_ARCH_NAME).OVERRIDES
                        -- full path name of file to be included at the bottom
                           of 'leaf.cfg' (and 'lib.cfg').  Allows overriding of
                           defaults.  Usually set to /dev/null.

            PROJECT_RELEASE
                        -- release/install directory
                           [ $(PROJECT_ROOT) ]
                           
            PROJECT_BIN  
                        -- directory for installed binaries
                           [ $(PROJECT_ROOT)/bin ]

            PROJECT_UTIL
                        -- directory for build environment commands
                           [ eg: $(PROJECT_ROOT)/buildenv-sun4/bin ]
                           
            TARCH       -- ${TARGET_ARCH} without the '-'
                           [ eg: sun4 or sparc (svr4 machines) ]

            ARCH        -- target sub-directory for object code
                           [ eg: sun4 or sun4-debug, etc. ]

            HOST_ARCH   -- host machine architecture
                           [ eg: -sun4 ]
                           
            HOST_ARCH_NAME
                        -- host machine architecture name
                           [ eg: sun4, sparc on SVR4 ]
                           
            VARIANTS    -- full list of all possible variant names used mainly
                           for 'make clean'
                           [ eg: "sparc sparc-debug sparc-profile" ]

            VARIANT_VA  -- Variant name.
                           Normally "", but for 'make debug' it is "debug",
                           for 'make profile', "profile, etc.
                           
                           see make/leaf.cfg for more info.
                           
        
        Preset compilation variables
        ----------------------------

          This is a list of some of the compilation variables.
          Refer to the compiler config files for the complete list.

            CFLAGS_OPTIMIZE_V   -- value of optimize flag for compiler
                                   [ eg: -O ]

            CFLAGS_DEBUG_V      -- value of debug flag for compiler
                                   [ eg: -g ]

            CFLAGS_PROFILE_V    -- compiler profile flags
                                   [ eg: -pg ]

            CFLAGS_DEBUG_OPTIMIZE_V
                                -- optimize flag if compiling for debug
                                     [ eg: "" ]

            CFLAGS_DEBUG
            CFLAGS_PROFILE
            CFLAGS_OPTIMIZE     -- current values for each depending
                                    on make variant.
            
            LDFLAGS_STATIC_LIBRARIES_V
                                -- ld option for static libraries
                                    -Bstatic or -dy (svr4)
                                
            LDFLAGS_SHARED_LIBRARIES_V
                                -- ld option for dynamic libraries
                                    -Bdynamic or -dn (svr4)

            LIB_SOCKET
                                -- ld(1) -l option(s) to provide
                                    socket support.

            LIB_MATH            -- ld(1) -l option(s) to provide
                                    math library.


            Makefile Variables
            ------------------

                The following variables may be set in a typical Makefile.

                C_PIECES    -- File names of your .c files without '.c' suffix.
                               [ eg: C_PIECES=main funcs stuff ]

                CC_PIECES   -- ditto, except for .cc files
                
                S_PIECES    -- ditto, except for .S files.
                
                LIB         -- target library name in leaf library makefiles.
                               [ eg: LIB=${ARCH}/libmine.a ]

                H_FILES     -- your .h files in this directory.
                               [ eg: H_FILES=stuff.h extra.h ]
                               
                DEFINES     -- cc -D items.  Included in CPPFLAGS.
                               leaf Makefiles.
                               [ eg: DEFINES += -DUNIX ]

                CPPFLAGS    -- -I include directories.
                               leaf Makefiles.
                               [ eg: CPPFLAGS += -I../include ]

                YFLAGS      -- Yacc flags.
                               leaf Makefiles.
                               [ eg: YFLAGS += -v ]
                               
                LD_PATHS    -- arguments to -L for ld.
                               Will be prefixed with '-L' or '-L ' as appropriate
                               and included in LDFLAGS.
                               
                LDFLAGS     -- -L arguments to ld; more may be ADDed.
                
                LD_LIBS     -- libraries to be linked in.
                               [ eg: LDLIBS += ../libfoo/${ARCH}/libfoo.a ]
                               
                XCFLAGS     -- "extra" CFLAGS for special needs.  Pre-pended
                               to CFLAGS.
                               Not set or used by Makefiles.
                               Can be set on command line to pass extra flags
                               to the compiler.

                XCPPFLAGS   -- ditto for CPPFLAGS
                               Can be set on command line to pass extra flags
                               to the preprocessor.

                XCCPPFLAGS  -- same as XCPPFLAGS for C++.

                XCCFLAGS    -- same as XCFLAGS for C++.

                SUB_DIRS    -- list of sub directories for make recursion.
                               directory Makefiles only.
                               [ eg: SUB_DIRS=jpeg cell ]
                               
                CLEAN_ADDITIONS
                            -- list of files or directories that should
                               be deleted by 'make clean'
                               [ eg: CLEAN_ADDITIONS += y.tab.c ]
                               
                               See 'leaf.cfg' for the 'clean:' rule and its
                               default deletions.

                CLOBBER_ADDITIONS
                            -- list of files or directories that should
                               be deleted by 'make clobber'
                               Since 'make clobber' includes 'make clean',
                               you don't need to duplicate items in both.

                TARGET_ARCH -- target architecture, prepended with '-'
                               leaf makefiles only.
                               Should be specified before 'include leaf.cfg'.
                               Only needs to be specified if your target is
                               different from output of `arch`.
                               
            Command names
            -------------

                The following commands should only be called
                as make variables:

                    MAKE,INSTALL,SHELL

                    ECHO,CAT,RM,CP,MV,LN,MKDIR,CHMOD

                    SORT,PRINT,TOUCH,CMP

                    DIRNAME,BASENAME,ED,SED,AWK,FGREP,GREP,EGREP

                    SCCS,SCCS_GET,SCCS_EDIT,SCCS_UNEDIT,SCCS_DELTA,
                    SCCS_CLEAN

                    CC,CPP,AS,AR,LD,NM,SIZE,RANLIB,MKLIB,
                    YACC,LEX,LINT,CTAGS,ETAGS
                    
            Directory Makefile Variables
            ----------------------------

                The following variables provide a little more flexibilty.
                They are rarely used (in the VX, all_DEPENDS was used only in
                the top-most Makefile in order to generate the compiler tools
                that would build much of the code)

                all_EXTRA,
                clean_EXTRA
                install_EXTRA
                clean_EXTRA
                clobber_EXTRA
                lint_EXTRA  -- At the end of a directory recursion to
                               process 'all', 'clean', etc., any
                               command in the variable will be run.

                               This is handy in certain cases where you need
                               to do just a bit of wrap up work at the end of
                               a recursive make.  For example, it may be used
                               to install a library built from multiple source
                               sub-directories.
                
                               Note: setting install_EXTRA automatically sets
                                     debug_install_EXTRA and
                                     profile_install_EXTRA.
                                     
                all_DEPENDS
                clean_DEPENDS
                install_DEPENDS
                clean_DEPENDS
                clobber_DEPENDS
                lint_DEPENDS --Specify additional dependencies for recursive
                               (directory level) targets.

                               This is handy in certain cases where you need
                               to do a bit of setup before a recursive make.
                               An example usage is to have 'all' depend on
                               some source files that may need to be extracted
                               from SCCS.
                
                               Note: setting install_DEPENDS automatically sets
                                     debug_install_DEPENDS and
                                     profile_install_DEPENDS.

    make/Templates
    --------------

        This directory contains Makefile and source file templates that
        should help in creating or converting makefiles.

        Makefile.leaf
            Template leaf Makefiles.

        Makefile.lib
            Template leaf library Makefiles.

        Makefile.dir
            Template "directory" makefile.


    .KEEP_STATE:
        .KEEP_STATE is a feature of Sun's version of make that causes
        make to record "hidden dependencies" in file ".make.state"
        in the directory where make is run.

        In this records every option used to compile a particular
        program, every include file that was used, every library
        linked in, and so forth.

        .KEEP_STATE is great, but it can cause problems.  If you move or
        rearrange your clone or change the name of the directory (same thing)
        you should delete all the .make.state files.

            find $MPO_ROOT -name .make.state -print | xargs rm -f


