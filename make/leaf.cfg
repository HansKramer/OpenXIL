# 
# 1.26 97/06/04 Sun Microsystems North Carolina Development Center
#
# make/leaf.cfg
#
#   Make(1) configuration file include'd by all leaf-node Makefiles
#

# get most stuff done

include $(PROJECT_ROOT)/make/main.cfg

include ${CONFIG.$(TARCH).CC}        # ... and compiler tools

#
# Builtin targets for compilation variants
#

profile profile_install profile_install_xil:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_PROFILE=$(CFLAGS_PROFILE_V)" "LDFLAGS_PROFILE=$(LDFLAGS_PROFILE_V)" $(TARGET_VA)

tcov tcov_install tcov_install_xil:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_TCOV=$(CFLAGS_TCOV_V)" "CFLAGS_OPTIMIZE=$(CFLAGS_TCOV_OPTIMIZE_V)" "LDFLAGS_TCOV=$(LDFLAGS_TCOV_V)" $(TARGET_VA)

pcov pcov_install pcov_install_xil:
	$(MAKE) -f $(MAKEFILE) PURE=purecov MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_PCOV=$(CFLAGS_PCOV_V)" "CFLAGS_OPTIMIZE=$(CFLAGS_PCOV_OPTIMIZE_V)" "LDFLAGS_PCOV=$(LDFLAGS_PCOV_V)" $(TARGET_VA)


debug debug_install debug_install_xil:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_DEBUG=$(CFLAGS_DEBUG_V)" "CFLAGS_OPTIMIZE=$(CFLAGS_DEBUG_OPTIMIZE_V)" "CFLAGS_LIB_OPTION=$(CFLAGS_DEBUG_LIB_OPTION_V)" "LDFLAGS_DEBUG=$(LDFLAGS_DEBUG_V)" "RCFLAGS_DEBUG=$(RCFLAGS_DEBUG_V)" $(TARGET_VA) 

release release_install release_install_xil:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_RELEASE=$(CFLAGS_RELEASE_V)" "CFLAGS_DEFINES=$(CFLAGS_RELEASE_DEFINES_V)" "CFLAGS_OPTIMIZE=$(CFLAGS_RELEASE_OPTIMIZE_V)" "CFLAGS_LIB_OPTION=$(CFLAGS_RELEASE_LIB_OPTION_V)" "LDFLAGS_RELEASE=$(LDFLAGS_RELEASE_V)" "RCFLAGS_RELEASE=$(RCFLAGS_RELEASE_V)" $(TARGET_VA)

releaseM releaseM_install releaseM_install_xil:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_RELEASEM=$(CFLAGS_RELEASEM_V)" "CFLAGS_OPTIMIZE=$(CFLAGS_RELEASEM_OPTIMIZE_V)" "LDFLAGS_RELEASEM=$(LDFLAGS_RELEASEM_V)" $(TARGET_VA)

releaseU releaseU_install releaseU_install_xil:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) "ARCH=${TARCH}${VARIANT}" "CFLAGS_RELEASEU=$(CFLAGS_RELEASEU_V)" "CFLAGS_OPTIMIZE=$(CFLAGS_RELEASEU_OPTIMIZE_V)" "LDFLAGS_RELEASEU=$(LDFLAGS_RELEASEU_V)" $(TARGET_VA)

#
# Build source browser database
# This is not really a variant, as it doesn't change ARCH or TARCH
#

index index_install:
	$(MAKE) -f $(MAKEFILE) MAKEFILE=$(MAKEFILE) CFLAGS_INDEX=$(CFLAGS_INDEX_V) $(TARGET_VA)

#
# VARIANT_VA will convert our ${ARCH} back into "" or "debug" or "profile".
#   Handy when one makefile wants to hop over into a peer's tree and
#   build something "the same" way. 
#

VARIANT-$(TARCH)-v =
VARIANT-$(TARCH)-debug-v = debug
VARIANT-$(TARCH)-profile-v = profile
VARIANT-$(TARCH)-tcov-v = tcov
VARIANT-$(TARCH)-pcov-v = pcov
VARIANT-$(TARCH)-release-v = release
VARIANT-$(TARCH)-releaseM-v = releaseM
VARIANT-$(TARCH)-releaseU-v = releaseU

VARIANT_VA = $(VARIANT-$(ARCH)-v)

#
# TARGET_VA will convert $@ (expected to be 'debug' or 'debug_install' or 'profile' etc.)
#   into "" or "install" as appropriate.
#   Used for variant recursion.
#

TARGET_debug_V = all
TARGET_profile_V = all
TARGET_tcov_V = all
TARGET_pcov_V = all
TARGET_index_V = all
TARGET_release_V = all
TARGET_releaseM_V = all
TARGET_releaseU_V = all

TARGET_debug_install_V = install
TARGET_profile_install_V = install
TARGET_tcov_install_V = install
TARGET_pcov_install_V = install
TARGET_index_install_V = install
TARGET_release_install_V = install
TARGET_releaseM_install_V = install
TARGET_releaseU_install_V = install

TARGET_debug_install_xil_V = install_xil
TARGET_profile_install_xil_V = install_xil
TARGET_tcov_install_xil_V = install_xil
TARGET_pcov_install_xil_V = install_xil
TARGET_release_install_xil_V = install_xil
TARGET_releaseM_install_xil_V = install_xil
TARGET_releaseU_install_xil_V = install_xil

TARGET_VA = $(TARGET_$@_V)

#
# LIBSUFFIX_VA, will "index" into LIBSUFF-*-v macros and
#   convert our ${ARCH} back into .a or _g.a or _p.a based on debug or profile.
#   Useful for installing libraries.
#

LIBSUFFIX_$(TARCH)_V=
LIBSUFFIX_$(TARCH)-debug_V=_g
LIBSUFFIX_$(TARCH)-profile_V=_p
LIBSUFFIX_$(TARCH)-tcov_V=_t
LIBSUFFIX_$(TARCH)-pcov_V=_c
LIBSUFFIX_$(TARCH)-release_V=
LIBSUFFIX_$(TARCH)-releaseM_V=_m
LIBSUFFIX_$(TARCH)-releaseU_V=_u

LIB_VARIANT=$(LIBSUFFIX_$(ARCH)_V)
LIBSUFFIX_VA = $(LIB_VARIANT).a

#
# Builtin clean and clobber rules
# Individual makefiles can add stuff via CLEAN_ADDITIONS and CLOBBER_ADDITIONS
# If desperate to save something, they can override CLEAN_OS, CLEAN_CC, etc.
#

clean:
	$(RM) -r a.out core mon.out gmon.out $(CLEAN_OS) $(CLEAN_CC)
	$(RM) -r $(CLEAN_PROTO) $(CLEAN_DEPEND) a.out
	$(RM) -r $(VARIANTS)
	$(RM) -r $(CLEAN_ADDITIONS) a.out

clobber: clean
	-$(SCCS_CLEAN)
	$(RM) -r $(CLOBBER_OS) $(CLOBBER_CC)
	$(RM) -r $(CLOBBER_PROTO) $(CLOBBER_DEPEND) a.out
	$(RM) -r $(CLOBBER_ADDITIONS) a.out

#
# allow custom file to override stuff specified above.
#  Typically set to /dev/null
#

include $(CONFIG.$(TARCH).OVERRIDES)

SHELL = bash
